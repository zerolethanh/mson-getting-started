{"version":3,"sources":["components.js","mson-app.js","index.js"],"names":["contact","name","component","fields","label","required","block","contacts","baseFormFactory","product","store","storeName","app","menu","items","path","content","Component","setLayer","components","compiler","registerComponent","newComponent","render"],"mappings":"gVACaA,EAAU,CACrBC,KAAM,cACNC,UAAW,OACXC,OAAQ,CACN,CACEF,KAAM,YACNC,UAAW,YACXE,MAAO,aACPC,UAAU,EAIVC,OAAO,GAET,CACEL,KAAM,WACNC,UAAW,YACXE,MAAO,aAET,CACEH,KAAM,QACNC,UAAW,aACXE,MAAO,WAMAG,EAAW,CACtBN,KAAM,eACNC,UAAW,aACXE,MAAO,WAEPI,gBAAiB,CAEfN,UAAW,UACXO,QAAS,CACPP,UAAW,gBAOfQ,MAAO,CACLR,UAAW,oBACXS,UAAW,yBAKFC,EAAM,CACjBX,KAAM,UACNC,UAAW,MACXW,KAAM,CACJX,UAAW,OACXY,MAAO,CACL,CAEEC,KAAM,YACNX,MAAO,WACPY,QAAS,CACPd,UAAW,oB,iBCrDrB,IAAK,IAAID,KAHTgB,IAAUC,SAAS,YAGFC,EAAY,CAC3B,IAAIjB,EAAYiB,EAAWlB,GAC3BmB,IAASC,kBAAkBnB,EAAUD,KAAMC,GAI7C,IAIeU,EAJHQ,IAASE,aAAa,CAChCpB,UAAW,Y,gBCZbqB,iBAAOX,K","file":"static/js/main.f89f4853.chunk.js","sourcesContent":["// A contact component that captures the user's first name, last name and email address\nexport const contact = {\n  name: 'app.Contact',\n  component: 'Form',\n  fields: [\n    {\n      name: 'firstName',\n      component: 'TextField',\n      label: 'First Name',\n      required: true,\n\n      // When block is false, the next field will appear on the same line, i.e. the first name and\n      // last name will be on the same line\n      block: false\n    },\n    {\n      name: 'lastName',\n      component: 'TextField',\n      label: 'Last Name'\n    },\n    {\n      name: 'email',\n      component: 'EmailField',\n      label: 'Email'\n    }\n  ]\n};\n\n// Uses a RecordList to display a list of contacts\nexport const contacts = {\n  name: 'app.Contacts',\n  component: 'RecordList',\n  label: 'Contacts',\n  \n  baseFormFactory: {\n    // This factory creates Contacts\n    component: 'Factory',\n    product: {\n      component: 'app.Contact'\n    }\n  },\n\n  // We will use local storage to persist the data. This could be easily swapped out to use Firebase\n  // or some other store. Or, you could create your own custom store to interact with a GraphQL/REST\n  // API.\n  store: {\n    component: 'LocalStorageStore',\n    storeName: 'contactsLocalStorage'\n  }\n};\n\n// The main app component and the menu option\nexport const app = {\n  name: 'app.App',\n  component: 'App',\n  menu: {\n    component: 'Menu',\n    items: [\n      {\n        // The route to the list of contacts\n        path: '/contacts',\n        label: 'Contacts',\n        content: {\n          component: 'app.Contacts'\n        }\n      }\n    ]\n  }\n};\n","// This file is just boilerplate used to register the MSON components and then instantiate the app\n\nimport compiler from 'mson/lib/compiler';\nimport * as components from './components';\nimport Component from 'mson/lib/component';\n\n// Make sure we only process front-end actions\nComponent.setLayer('frontEnd');\n\n// Register all the components\nfor (let name in components) {\n  let component = components[name];\n  compiler.registerComponent(component.name, component);\n}\n\n// Intantiate the app\nconst app = compiler.newComponent({\n  component: 'app.App'\n});\n\nexport default app;\n","import app from './mson-app';\nimport { render } from 'mson-react';\nimport 'typeface-roboto';\n\n// Render the app\nrender(app);"],"sourceRoot":""}